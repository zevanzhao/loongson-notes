diff -uprN linux-4.19-loongson/arch/mips/include/asm/mach-loongson64/loongson.h linux-4.19-loongson-overclock/arch/mips/include/asm/mach-loongson64/loongson.h
--- linux-4.19-loongson/arch/mips/include/asm/mach-loongson64/loongson.h	2021-03-26 23:19:12.701743981 +0800
+++ linux-4.19-loongson-overclock/arch/mips/include/asm/mach-loongson64/loongson.h	2021-03-25 22:46:48.278609271 +0800
@@ -500,25 +500,11 @@ extern int stable_timer_enabled;
 void loongson_stablecounter_adjust(void);
 
 #ifdef CONFIG_CPU_LOONGSON3
+#include <asm/time.h>
+
 static inline unsigned int calc_const_freq(void)
 {
-	unsigned int res;
-	unsigned int base_freq;
-	unsigned int cfm, cfd;
-
-	res = read_cfg(LOONGSON_CPUCFG_CONFIG_FIELD2);
-	if (!(res & LOONGSON_CFG2_LLFTP))
-		return 0;
-
-	base_freq = read_cfg(LOONGSON_CPUCFG_CONFIG_FIELD4);
-	res = read_cfg(LOONGSON_CPUCFG_CONFIG_FIELD5);
-	cfm = res & 0xffff;
-	cfd = (res >> 16) & 0xffff;
-
-	if (!base_freq || !cfm || !cfd)
-		return 0;
-	else
-		return (base_freq * cfm / cfd);
+	return mips_cpu_frequency; 
 }
 #endif
 
diff -uprN linux-4.19-loongson/arch/mips/loongson64/common/env.c linux-4.19-loongson-overclock/arch/mips/loongson64/common/env.c
--- linux-4.19-loongson/arch/mips/loongson64/common/env.c	2021-03-26 23:19:12.701743981 +0800
+++ linux-4.19-loongson-overclock/arch/mips/loongson64/common/env.c	2021-03-25 22:48:46.532499537 +0800
@@ -57,6 +57,8 @@ struct platform_controller_hub *loongson
 
 bool loongson_acpiboot_flag;
 
+void ls3a4000_oc(void);
+
 u32 cpu_guestmode;
 u32 cpu_clock_freq;
 char cpu_full_name[64];
@@ -359,6 +361,9 @@ void __init no_efiboot_env(void)
 			break;
 		}
 	}
+
+	ls3a4000_oc();	
+
 	mips_cpu_frequency = cpu_clock_freq;
 	pr_info("CpuClock = %u\n", cpu_clock_freq);
 
diff -uprN linux-4.19-loongson/arch/mips/loongson64/loongson-3/ls3a4000_oc.c linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/ls3a4000_oc.c
--- linux-4.19-loongson/arch/mips/loongson64/loongson-3/ls3a4000_oc.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/ls3a4000_oc.c	2021-03-27 08:24:50.253593908 +0800
@@ -0,0 +1,343 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Overclocking Loongson-3A4000
+ * 
+ * Copyright (C) 2020 Jiaxun Yang <jiaxun.yang@flygoat.com>
+ * 
+ * Only effective on Lemote-A1901
+ * Usage: Default 2.0GHz@1.35V
+ * cmdline:
+ * oc.vcore=<volatage> in mV.
+ * oc.freq=<frequency> in MHz, must be multiply of 25. 
+ */
+#include <linux/init.h>
+
+#include <loongson.h>
+#include <boot_param.h>
+
+#include <asm/io.h>
+#include <asm/mipsregs.h>
+#include <asm/cpu.h>
+#include <asm/bootinfo.h>
+
+#define PRER_LO_REG	0x0
+#define PRER_HI_REG	0x1
+#define CTR_REG    	0x2
+#define TXR_REG    	0x3
+#define RXR_REG    	0x3
+#define CR_REG     	0x4
+#define SR_REG     	0x4
+#define SLV_CTRL_REG	0x7
+
+#define CR_START					0x80
+#define CR_STOP						0x40
+#define CR_READ						0x20
+#define CR_WRITE					0x10
+#define CR_ACK						0x8
+#define CR_IACK						0x1
+
+#define SR_NOACK					0x80
+#define SR_BUSY						0x40
+#define SR_AL						0x20
+#define SR_TIP						0x2
+
+#define LS3A4000_I2C0_REG_BASE	TO_UNCAC(0x1fe00120)
+#define	UPI9212S_ADDR0	        0x4a    //3A I2C0
+
+void __iomem *i2c_base_addr;
+unsigned char word_offset = 0;
+
+static void ls_i2c_stop(void)
+{
+	do {
+		writeb(CR_STOP, i2c_base_addr + CR_REG);
+		readb(i2c_base_addr + SR_REG);
+	} while(readb(i2c_base_addr + SR_REG) & SR_BUSY);
+}
+
+void ls_i2c_init(void)
+{
+	u8 val;
+	val = readb(i2c_base_addr + CTR_REG);
+	val &= ~0x80;
+	writeb(val, i2c_base_addr + CTR_REG);
+	writeb(0x71, i2c_base_addr + PRER_LO_REG);
+	writeb(0x1, i2c_base_addr + PRER_HI_REG);
+	val = readb(i2c_base_addr + CTR_REG);
+	val |=  0x80;
+	writeb(val, i2c_base_addr + CTR_REG);
+}
+
+static int ls_i2c_tx_byte(unsigned char data, unsigned char opt)
+{
+	int times = 1000000;
+	writeb(data, i2c_base_addr + TXR_REG);
+	writeb(opt, i2c_base_addr + CR_REG);
+	while ((readb(i2c_base_addr + SR_REG) & SR_TIP) && times--);
+	if (times < 0) {
+		pr_info("I2C failed to poll tip\n");
+		ls_i2c_stop();
+		return -1;
+	}
+
+	if (readb(i2c_base_addr + SR_REG) & SR_NOACK) {
+		pr_info("I2C didn't receive ACK\n");
+		ls_i2c_stop();
+		return -1;
+	}
+
+	return 0;
+}
+
+static int ls_i2c_send_addr(unsigned char dev_addr,unsigned int data_addr)
+{
+	if (ls_i2c_tx_byte(dev_addr, CR_START | CR_WRITE) < 0)
+		return 0;
+
+	if (word_offset) {
+	//some device need word size addr
+		if (ls_i2c_tx_byte((data_addr >> 8) & 0xff, CR_WRITE) < 0)
+			return 0;
+	}
+	if (ls_i2c_tx_byte(data_addr & 0xff, CR_WRITE) < 0)
+		return 0;
+
+	return 1;
+}
+
+
+ /*
+ * the function write sequence data.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data buffer
+ * count : size will be write
+  */
+int ls_i2c_write_seq(unsigned char dev_addr,unsigned int data_addr, unsigned char *buf, int count)
+{
+	int i;
+	if (!ls_i2c_send_addr(dev_addr,data_addr))
+		return 0;
+	for (i = 0; i < count; i++)
+		if (ls_i2c_tx_byte(buf[i] & 0xff, CR_WRITE) < 0)
+			return 0;
+
+	ls_i2c_stop();
+
+	return i;
+}
+
+ /*
+ * the function write one byte.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data
+  */
+int ls_i2c_write_byte(unsigned char dev_addr,unsigned int data_addr, unsigned char *buf)
+{
+	if (ls_i2c_write_seq(dev_addr, data_addr, buf, 1) == 1)
+		return 0;
+	return -1;
+}
+ /*
+  * Sequential reads by a current address read.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data buffer
+ * count : size will be write
+  */
+static int ls_i2c_read_seq_cur(unsigned char dev_addr,unsigned char *buf, int count)
+{
+	int i;
+	dev_addr |= 0x1;
+
+	if (ls_i2c_tx_byte(dev_addr, CR_START | CR_WRITE) < 0)
+		return 0;
+
+	for (i = 0; i < count; i++) {
+		writeb(((i == count - 1) ? (CR_READ | CR_ACK) : CR_READ), i2c_base_addr + CR_REG);
+		while (readb(i2c_base_addr + SR_REG) & SR_TIP) ;
+		buf[i] = readb(i2c_base_addr + RXR_REG);
+	}
+
+	ls_i2c_stop();
+	return i;
+}
+
+int ls_i2c_read_seq_rand(unsigned char dev_addr,unsigned int data_addr,
+				unsigned char *buf, int count)
+{
+	if (!ls_i2c_send_addr(dev_addr,data_addr))
+		return 0;
+
+	return ls_i2c_read_seq_cur(dev_addr,buf, count);
+}
+
+
+void ls3a4000_vctrl(u8 vid)
+{
+	u8 buf;
+	i2c_base_addr = (void __iomem *)LS3A4000_I2C0_REG_BASE;
+	
+	ls_i2c_init();
+
+	buf = vid;
+	if(ls_i2c_write_byte(UPI9212S_ADDR0, 0x30, &buf))
+		pr_info("LS3A4000_OC: Failed to set VID\n");
+
+	pr_info("LS3A4000_OC: VID set: %u\n", vid);
+}
+
+#define MAIN_PLL_BASE TO_UNCAC(0x1fe001b0)
+#define MAIN_PLL_REG_LO	(void __iomem *)MAIN_PLL_BASE
+#define MAIN_PLL_REG_HI	(void __iomem *)(MAIN_PLL_BASE + 0x4)
+
+/* Low Regs */
+#define SEL_PLL_NODE_B	(1 << 0)
+#define SOFT_SEL_PLL_B	(1 << 2)
+#define BYPASS_B	(1 << 3)
+#define LOCKEN_B	(1 << 7)
+#define LOCKC_F		10
+#define LOCKED_B	(1 << 16)
+#define PD_B		(1 << 19)
+#define REFC_F		26
+#define REFC_MASK	GENMASK(31, 26)
+
+#define LOCKC_VAL	0x3
+
+/* High Regs */
+#define LOOPC_F	0
+#define LOOPC_MASK	GENMASK(8, 0)
+#define DIV_F	10
+#define DIV_MASK	GENMASK(15, 10)
+
+#define STABLE_SCALE_F	12
+#define STABLE_SCALE_MASK	GENMASK(14, 12)
+
+void main_pll_sel(uint8_t refc, uint16_t loopc, uint8_t div)
+{
+	uint32_t low, hi;
+	int i = 0;
+	low = readl(MAIN_PLL_REG_LO);
+	hi = readl(MAIN_PLL_REG_HI);
+
+	/* Clear SEL Bits */
+	low &= ~(SEL_PLL_NODE_B | SOFT_SEL_PLL_B);
+	writel(low, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step1: clr sel\n");
+	low |= PD_B;
+	pr_info("LS3A4000_OC: PLL Step2: pd\n");
+
+	/* Write Once */
+	writel(low, MAIN_PLL_REG_LO);
+
+	writel((loopc << LOOPC_F) | (div << DIV_F), MAIN_PLL_REG_HI);
+	low = (refc << REFC_F) | (LOCKC_VAL << LOCKC_F) | LOCKEN_B;
+	writel(low, MAIN_PLL_REG_LO);
+	low |= SOFT_SEL_PLL_B;
+	writel(low, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step3: set val\n");
+
+	/* Wait until PLL Locked */
+	while(!(readl(MAIN_PLL_REG_LO) & LOCKED_B)) {
+		i++;
+		pr_info("PLL Waiting val: %x\n", i);
+	}
+	pr_info("LS3A4000_OC: PLL Step4: wait lock\n");
+
+	low = readl(MAIN_PLL_REG_LO);
+	writel(low | SEL_PLL_NODE_B, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step5: sel pll\n");
+}
+
+
+static char *get_cmdline(char *envname)
+{
+	char *env = &arcs_cmdline[0];
+	int i, j = 0;
+
+	i = strlen(envname);
+
+	while (env && j < COMMAND_LINE_SIZE) {
+		if (strncmp(envname, env, i) == 0 && *(env + i) == '=')
+			return env + i + 1;
+		env++;
+		j++;
+	}
+
+	return 0;
+}
+
+/*
+static bool is_a1901(void) {
+	struct boot_params *boot_p;
+	struct loongson_params *loongson_p;
+	struct board_devices *eboard;
+
+	boot_p = (struct boot_params *)fw_arg2;
+	loongson_p = &(boot_p->efi.sysinfo.lp);
+	eboard	= (struct board_devices *)
+		((u64)loongson_p + loongson_p->boarddev_table_offset);
+
+	if (strstr(eboard->name,"LEMOTE") && strstr(eboard->name,"LS3A4000")
+		&& strstr(eboard->name,"1w-V01-pc")) {
+		return true;
+	}
+	return false;
+}
+*/
+
+void ls3a4000_oc(void)
+{
+	u8 vid;
+	u32 mv = 1350, freq = 2000;
+	char *p;
+	
+	unsigned long * trigger = (unsigned long*)0xffffffffbfe00420;
+	(*trigger) &= ~0x100;
+	//(unsigned long *) 0xffffffffbfe00420 &= ~0x100; /*turn-off the small cpu in 3A4000*/
+	pr_info("turn-off the small cpu in 3A4000.");
+	pr_info("LS3A4000_OC: Author Jiaxun Yang <jiaxun.yang@flygoat.com>\n");
+	/*
+	if (!is_a1901())
+	  return;
+	*/
+	p = get_cmdline("oc.vcore");
+	if (p)
+		mv = simple_strtol(p, 0, 0);
+	
+	p = get_cmdline("oc.freq");
+	if (p)
+		freq = simple_strtol(p, 0, 0);
+
+	if (mv >= 800 && mv <= 1500) {
+		vid = (mv * 1000 - 210000) / 6587;
+		pr_info("LS3A4000_OC: Volatge: %u mV\n", mv);
+		ls3a4000_vctrl(vid);
+	}
+
+	if (freq >= 100 && freq <= 3000) {
+		uint8_t refc; 
+		uint16_t loopc;
+		if (!(freq % 100)) {
+			refc = 1;
+			loopc = freq / 100;
+		} else if (!(freq % 50)) {
+			refc = 2;
+			loopc = freq / 50;		
+		} else if (!(freq % 25)) {
+			refc = 4;
+			loopc = freq / 25;
+		} else {
+			pr_info("LS3A4000_OC: %u is not supported, must be a multiply of 25\n", freq);
+			return;
+		}
+	
+		cpu_clock_freq = freq * 1000 * 1000;
+
+		pr_info("LS3A4000_OC: PLL REFC: %u, LOOPC: %u, DIV: 1\n", refc, loopc);
+		main_pll_sel(refc, loopc, 1);
+	}
+
+	pr_info("LS3A4000_OC: Done! Have Fun!\n");
+}
diff -uprN linux-4.19-loongson/arch/mips/loongson64/loongson-3/ls3a4000_oc.c~ linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/ls3a4000_oc.c~
--- linux-4.19-loongson/arch/mips/loongson64/loongson-3/ls3a4000_oc.c~	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/ls3a4000_oc.c~	2021-03-27 08:20:41.237935699 +0800
@@ -0,0 +1,343 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Overclocking Loongson-3A4000
+ * 
+ * Copyright (C) 2020 Jiaxun Yang <jiaxun.yang@flygoat.com>
+ * 
+ * Only effective on Lemote-A1901
+ * Usage: Default 2.0GHz@1.35V
+ * cmdline:
+ * oc.vcore=<volatage> in mV.
+ * oc.freq=<frequency> in MHz, must be multiply of 25. 
+ */
+#include <linux/init.h>
+
+#include <loongson.h>
+#include <boot_param.h>
+
+#include <asm/io.h>
+#include <asm/mipsregs.h>
+#include <asm/cpu.h>
+#include <asm/bootinfo.h>
+
+#define PRER_LO_REG	0x0
+#define PRER_HI_REG	0x1
+#define CTR_REG    	0x2
+#define TXR_REG    	0x3
+#define RXR_REG    	0x3
+#define CR_REG     	0x4
+#define SR_REG     	0x4
+#define SLV_CTRL_REG	0x7
+
+#define CR_START					0x80
+#define CR_STOP						0x40
+#define CR_READ						0x20
+#define CR_WRITE					0x10
+#define CR_ACK						0x8
+#define CR_IACK						0x1
+
+#define SR_NOACK					0x80
+#define SR_BUSY						0x40
+#define SR_AL						0x20
+#define SR_TIP						0x2
+
+#define LS3A4000_I2C0_REG_BASE	TO_UNCAC(0x1fe00120)
+#define	UPI9212S_ADDR0	        0x4a    //3A I2C0
+
+void __iomem *i2c_base_addr;
+unsigned char word_offset = 0;
+
+static void ls_i2c_stop(void)
+{
+	do {
+		writeb(CR_STOP, i2c_base_addr + CR_REG);
+		readb(i2c_base_addr + SR_REG);
+	} while(readb(i2c_base_addr + SR_REG) & SR_BUSY);
+}
+
+void ls_i2c_init(void)
+{
+	u8 val;
+	val = readb(i2c_base_addr + CTR_REG);
+	val &= ~0x80;
+	writeb(val, i2c_base_addr + CTR_REG);
+	writeb(0x71, i2c_base_addr + PRER_LO_REG);
+	writeb(0x1, i2c_base_addr + PRER_HI_REG);
+	val = readb(i2c_base_addr + CTR_REG);
+	val |=  0x80;
+	writeb(val, i2c_base_addr + CTR_REG);
+}
+
+static int ls_i2c_tx_byte(unsigned char data, unsigned char opt)
+{
+	int times = 1000000;
+	writeb(data, i2c_base_addr + TXR_REG);
+	writeb(opt, i2c_base_addr + CR_REG);
+	while ((readb(i2c_base_addr + SR_REG) & SR_TIP) && times--);
+	if (times < 0) {
+		pr_info("I2C failed to poll tip\n");
+		ls_i2c_stop();
+		return -1;
+	}
+
+	if (readb(i2c_base_addr + SR_REG) & SR_NOACK) {
+		pr_info("I2C didn't receive ACK\n");
+		ls_i2c_stop();
+		return -1;
+	}
+
+	return 0;
+}
+
+static int ls_i2c_send_addr(unsigned char dev_addr,unsigned int data_addr)
+{
+	if (ls_i2c_tx_byte(dev_addr, CR_START | CR_WRITE) < 0)
+		return 0;
+
+	if (word_offset) {
+	//some device need word size addr
+		if (ls_i2c_tx_byte((data_addr >> 8) & 0xff, CR_WRITE) < 0)
+			return 0;
+	}
+	if (ls_i2c_tx_byte(data_addr & 0xff, CR_WRITE) < 0)
+		return 0;
+
+	return 1;
+}
+
+
+ /*
+ * the function write sequence data.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data buffer
+ * count : size will be write
+  */
+int ls_i2c_write_seq(unsigned char dev_addr,unsigned int data_addr, unsigned char *buf, int count)
+{
+	int i;
+	if (!ls_i2c_send_addr(dev_addr,data_addr))
+		return 0;
+	for (i = 0; i < count; i++)
+		if (ls_i2c_tx_byte(buf[i] & 0xff, CR_WRITE) < 0)
+			return 0;
+
+	ls_i2c_stop();
+
+	return i;
+}
+
+ /*
+ * the function write one byte.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data
+  */
+int ls_i2c_write_byte(unsigned char dev_addr,unsigned int data_addr, unsigned char *buf)
+{
+	if (ls_i2c_write_seq(dev_addr, data_addr, buf, 1) == 1)
+		return 0;
+	return -1;
+}
+ /*
+  * Sequential reads by a current address read.
+ * dev_addr : device id
+ * data_addr : offset
+ * buf : the write data buffer
+ * count : size will be write
+  */
+static int ls_i2c_read_seq_cur(unsigned char dev_addr,unsigned char *buf, int count)
+{
+	int i;
+	dev_addr |= 0x1;
+
+	if (ls_i2c_tx_byte(dev_addr, CR_START | CR_WRITE) < 0)
+		return 0;
+
+	for (i = 0; i < count; i++) {
+		writeb(((i == count - 1) ? (CR_READ | CR_ACK) : CR_READ), i2c_base_addr + CR_REG);
+		while (readb(i2c_base_addr + SR_REG) & SR_TIP) ;
+		buf[i] = readb(i2c_base_addr + RXR_REG);
+	}
+
+	ls_i2c_stop();
+	return i;
+}
+
+int ls_i2c_read_seq_rand(unsigned char dev_addr,unsigned int data_addr,
+				unsigned char *buf, int count)
+{
+	if (!ls_i2c_send_addr(dev_addr,data_addr))
+		return 0;
+
+	return ls_i2c_read_seq_cur(dev_addr,buf, count);
+}
+
+
+void ls3a4000_vctrl(u8 vid)
+{
+	u8 buf;
+	i2c_base_addr = (void __iomem *)LS3A4000_I2C0_REG_BASE;
+	
+	ls_i2c_init();
+
+	buf = vid;
+	if(ls_i2c_write_byte(UPI9212S_ADDR0, 0x30, &buf))
+		pr_info("LS3A4000_OC: Failed to set VID\n");
+
+	pr_info("LS3A4000_OC: VID set: %u\n", vid);
+}
+
+#define MAIN_PLL_BASE TO_UNCAC(0x1fe001b0)
+#define MAIN_PLL_REG_LO	(void __iomem *)MAIN_PLL_BASE
+#define MAIN_PLL_REG_HI	(void __iomem *)(MAIN_PLL_BASE + 0x4)
+
+/* Low Regs */
+#define SEL_PLL_NODE_B	(1 << 0)
+#define SOFT_SEL_PLL_B	(1 << 2)
+#define BYPASS_B	(1 << 3)
+#define LOCKEN_B	(1 << 7)
+#define LOCKC_F		10
+#define LOCKED_B	(1 << 16)
+#define PD_B		(1 << 19)
+#define REFC_F		26
+#define REFC_MASK	GENMASK(31, 26)
+
+#define LOCKC_VAL	0x3
+
+/* High Regs */
+#define LOOPC_F	0
+#define LOOPC_MASK	GENMASK(8, 0)
+#define DIV_F	10
+#define DIV_MASK	GENMASK(15, 10)
+
+#define STABLE_SCALE_F	12
+#define STABLE_SCALE_MASK	GENMASK(14, 12)
+
+void main_pll_sel(uint8_t refc, uint16_t loopc, uint8_t div)
+{
+	uint32_t low, hi;
+	int i = 0;
+	low = readl(MAIN_PLL_REG_LO);
+	hi = readl(MAIN_PLL_REG_HI);
+
+	/* Clear SEL Bits */
+	low &= ~(SEL_PLL_NODE_B | SOFT_SEL_PLL_B);
+	writel(low, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step1: clr sel\n");
+	low |= PD_B;
+	pr_info("LS3A4000_OC: PLL Step2: pd\n");
+
+	/* Write Once */
+	writel(low, MAIN_PLL_REG_LO);
+
+	writel((loopc << LOOPC_F) | (div << DIV_F), MAIN_PLL_REG_HI);
+	low = (refc << REFC_F) | (LOCKC_VAL << LOCKC_F) | LOCKEN_B;
+	writel(low, MAIN_PLL_REG_LO);
+	low |= SOFT_SEL_PLL_B;
+	writel(low, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step3: set val\n");
+
+	/* Wait until PLL Locked */
+	while(!(readl(MAIN_PLL_REG_LO) & LOCKED_B)) {
+		i++;
+		pr_info("PLL Waiting val: %x\n", i);
+	}
+	pr_info("LS3A4000_OC: PLL Step4: wait lock\n");
+
+	low = readl(MAIN_PLL_REG_LO);
+	writel(low | SEL_PLL_NODE_B, MAIN_PLL_REG_LO);
+	pr_info("LS3A4000_OC: PLL Step5: sel pll\n");
+}
+
+
+static char *get_cmdline(char *envname)
+{
+	char *env = &arcs_cmdline[0];
+	int i, j = 0;
+
+	i = strlen(envname);
+
+	while (env && j < COMMAND_LINE_SIZE) {
+		if (strncmp(envname, env, i) == 0 && *(env + i) == '=')
+			return env + i + 1;
+		env++;
+		j++;
+	}
+
+	return 0;
+}
+
+/*
+static bool is_a1901(void) {
+	struct boot_params *boot_p;
+	struct loongson_params *loongson_p;
+	struct board_devices *eboard;
+
+	boot_p = (struct boot_params *)fw_arg2;
+	loongson_p = &(boot_p->efi.sysinfo.lp);
+	eboard	= (struct board_devices *)
+		((u64)loongson_p + loongson_p->boarddev_table_offset);
+
+	if (strstr(eboard->name,"LEMOTE") && strstr(eboard->name,"LS3A4000")
+		&& strstr(eboard->name,"1w-V01-pc")) {
+		return true;
+	}
+	return false;
+}
+*/
+
+void ls3a4000_oc(void)
+{
+	u8 vid;
+	u32 mv = 1350, freq = 2000;
+	char *p;
+	
+	usigned long * trigger = 0xffffffffbfe00420;
+	(*trigger) &= ~0x100;
+	//(unsigned long *) 0xffffffffbfe00420 &= ~0x100; /*turn-off the small cpu in 3A4000*/
+	pr_info("turn-off the small cpu in 3A4000.");
+	pr_info("LS3A4000_OC: Author Jiaxun Yang <jiaxun.yang@flygoat.com>\n");
+	/*
+	if (!is_a1901())
+	  return;
+	*/
+	p = get_cmdline("oc.vcore");
+	if (p)
+		mv = simple_strtol(p, 0, 0);
+	
+	p = get_cmdline("oc.freq");
+	if (p)
+		freq = simple_strtol(p, 0, 0);
+
+	if (mv >= 800 && mv <= 1500) {
+		vid = (mv * 1000 - 210000) / 6587;
+		pr_info("LS3A4000_OC: Volatge: %u mV\n", mv);
+		ls3a4000_vctrl(vid);
+	}
+
+	if (freq >= 100 && freq <= 3000) {
+		uint8_t refc; 
+		uint16_t loopc;
+		if (!(freq % 100)) {
+			refc = 1;
+			loopc = freq / 100;
+		} else if (!(freq % 50)) {
+			refc = 2;
+			loopc = freq / 50;		
+		} else if (!(freq % 25)) {
+			refc = 4;
+			loopc = freq / 25;
+		} else {
+			pr_info("LS3A4000_OC: %u is not supported, must be a multiply of 25\n", freq);
+			return;
+		}
+	
+		cpu_clock_freq = freq * 1000 * 1000;
+
+		pr_info("LS3A4000_OC: PLL REFC: %u, LOOPC: %u, DIV: 1\n", refc, loopc);
+		main_pll_sel(refc, loopc, 1);
+	}
+
+	pr_info("LS3A4000_OC: Done! Have Fun!\n");
+}
diff -uprN linux-4.19-loongson/arch/mips/loongson64/loongson-3/Makefile linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/Makefile
--- linux-4.19-loongson/arch/mips/loongson64/loongson-3/Makefile	2021-03-26 23:19:12.705650230 +0800
+++ linux-4.19-loongson-overclock/arch/mips/loongson64/loongson-3/Makefile	2021-03-26 22:26:44.053851512 +0800
@@ -3,7 +3,7 @@
 #
 obj-y			+= irq.o cop2-ex.o platform.o acpi_init.o dma.o clock.o ec_wpce775l.o workarounds.o \
 					ls2h-irq.o ls2h-platform.o pch-irq.o ls7a-platform.o rs780-irq.o rs780-platform.o \
-					stable_counter.o ec_npce985x.o ec_it8528.o
+					stable_counter.o ec_npce985x.o ec_it8528.o ls3a4000_oc.o
 
 toolchain-loongson-ext2	:= $(call cc-option-yn,$(mips-cflags) -mloongson-ext2)
 obj-$(toolchain-loongson-ext2)	+= loongson3-memcpy.o loongson3-memset.o

